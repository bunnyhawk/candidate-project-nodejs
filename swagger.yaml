components:
  parameters:
    commentId:
      name: comment id
      description: The comment id number.
      in: path
      required: true
      schema:
        type: string
    postId:
      name: post id
      description: The post id number.
      in: path
      required: true
      schema:
        type: string
    accountNumber:
      name: accountNumber
      description: The SAP account number.
      in: path
      required: true
      schema:
        type: string
  schemas:
    Comment:
      type: object
      properties:
        userId:
          type: integer
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        body:
          type: string
    CommentResponse:
      type: array
      items:
        $ref: '#/components/schemas/Comment'
    Post:
      type: object
      properties:
        userId:
          type: integer
        id:
          type: integer
        title:
          type: string
        body:
          type: string
    PostsResponse:
      type: array
      items:
        $ref: '#/components/schemas/Post'
    Success:
      type: object
      properties:
        message:
          type: string
    Error:
      type: object
      properties:
        message:
          type: string
        errorType:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        username:
          type: string
        email:
          type: string
        address:
          type: object
          properties:
            street:
              type: string
            city:
              type: string
            zipcode:
              type: string
            geo:
              type: object
              properties:
                lat:
                  type: string
                  description: geo latitude
                lng:
                  type: string
                  description: geo longitude
        phoneNumbers:
          type: array
          items:
            type: string
        website:
          type: string
    UserResponse:
      type: array
      items:
        $ref: '#/components/schemas/User'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
openapi: 3.0.0
info:
  version: 1.0.0
  title: Candidate Project
  description: REST services to serve the experience
servers:
  - url: 'https://localhost:3001/v1'
paths:
  '/comments/post/:postId':
    get:
      summary: Get comments by post ID
      description: Retrieve comments by a post ID.
      tags:
        - comments
      parameters:
        - $ref: '#/components/parameters/postId'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  '/comments/:commentId':
    delete:
      summary: Delete user
      description: Remove a user by their ID.
      tags:
        - comments
      parameters:
        - $ref: '#/components/parameters/commentId'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /posts:
    get:
      summary: Get All Posts
      description: Retrieve all posts.
      tags:
        - posts
      responses:
        '200':
          description: OK
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/PostsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  '/posts/update/:postId':
    post:
      summary: Update Post
      description: Update a post with an ID.
      tags:
        - posts
      parameters:
        - $ref: '#/components/parameters/postId'
      requestBody:
        description: Post object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /users:
    get:
      summary: Get All Users
      description: Retrieve all users.
      tags:
        - users
      responses:
        '200':
          description: OK
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
    post:
      summary: Create User
      description: Add a new user to the users list.
      tags:
        - users
      requestBody:
        description: User object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
tags:
  - name: comments
  - name: posts
  - name: users
